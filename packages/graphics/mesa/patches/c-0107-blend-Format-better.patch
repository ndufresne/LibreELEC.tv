From 1284957bf7451845cd8c8ae226b1517e982b70dc Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@rosenzweig.io>
Date: Sat, 10 Nov 2018 22:40:55 -0800
Subject: [PATCH 107/151] blend: Format better

---
 src/compiler/nir/nir_lower_blend.c | 241 ++++++++++++++++++-------------------
 src/compiler/nir/nir_lower_blend.h |  12 +-
 2 files changed, 129 insertions(+), 124 deletions(-)

diff --git a/src/compiler/nir/nir_lower_blend.c b/src/compiler/nir/nir_lower_blend.c
index d979a9f..2cb32ca 100644
--- a/src/compiler/nir/nir_lower_blend.c
+++ b/src/compiler/nir/nir_lower_blend.c
@@ -22,9 +22,6 @@
  * IN THE SOFTWARE.
  */
 
-#include "compiler/nir/nir_builder.h"
-#include "pipe/p_state.h"
-#include "util/u_format.h"
 #include "nir_lower_blend.h"
 
 /* Implements fixed-function blending in software. The standard entrypoint for
@@ -50,58 +47,58 @@ nir_blend_channel_f(nir_builder *b,
                     unsigned factor,
                     int channel)
 {
-        switch(factor) {
-        case PIPE_BLENDFACTOR_ONE:
-                return nir_imm_float(b, 1.0);
-        case PIPE_BLENDFACTOR_SRC_COLOR:
-                return src[channel];
-        case PIPE_BLENDFACTOR_SRC_ALPHA:
-                return src[3];
-        case PIPE_BLENDFACTOR_DST_ALPHA:
-                return dst[3];
-        case PIPE_BLENDFACTOR_DST_COLOR:
-                return dst[channel];
-        case PIPE_BLENDFACTOR_SRC_ALPHA_SATURATE:
-                if (channel != 3) {
-                        return nir_fmin(b,
-                                        src[3],
-                                        nir_fsub(b,
-                                                 nir_imm_float(b, 1.0),
-                                                 dst[3]));
-                } else {
-                        return nir_imm_float(b, 1.0);
-                }
-        case PIPE_BLENDFACTOR_CONST_COLOR:
-                return nir_channel(b, constant, channel);
-        case PIPE_BLENDFACTOR_CONST_ALPHA:
-                return nir_channel(b, constant, 3);
-        case PIPE_BLENDFACTOR_ZERO:
-                return nir_imm_float(b, 0.0);
-        case PIPE_BLENDFACTOR_INV_SRC_COLOR:
-                return nir_fsub(b, nir_imm_float(b, 1.0), src[channel]);
-        case PIPE_BLENDFACTOR_INV_SRC_ALPHA:
-                return nir_fsub(b, nir_imm_float(b, 1.0), src[3]);
-        case PIPE_BLENDFACTOR_INV_DST_ALPHA:
-                return nir_fsub(b, nir_imm_float(b, 1.0), dst[3]);
-        case PIPE_BLENDFACTOR_INV_DST_COLOR:
-                return nir_fsub(b, nir_imm_float(b, 1.0), dst[channel]);
-        case PIPE_BLENDFACTOR_INV_CONST_COLOR:
-                return nir_fsub(b, nir_imm_float(b, 1.0),
-                                nir_channel(b, constant, channel));
-        case PIPE_BLENDFACTOR_INV_CONST_ALPHA:
-                return nir_fsub(b, nir_imm_float(b, 1.0),
-                                nir_channel(b, constant, 3));
-                                
-
-        default:
-        case PIPE_BLENDFACTOR_SRC1_COLOR:
-        case PIPE_BLENDFACTOR_SRC1_ALPHA:
-        case PIPE_BLENDFACTOR_INV_SRC1_COLOR:
-        case PIPE_BLENDFACTOR_INV_SRC1_ALPHA:
-                /* Unsupported. */
-                fprintf(stderr, "Unknown blend factor %d\n", factor);
-                return nir_imm_float(b, 1.0);
-        }
+   switch(factor) {
+   case PIPE_BLENDFACTOR_ONE:
+      return nir_imm_float(b, 1.0);
+   case PIPE_BLENDFACTOR_SRC_COLOR:
+      return src[channel];
+   case PIPE_BLENDFACTOR_SRC_ALPHA:
+      return src[3];
+   case PIPE_BLENDFACTOR_DST_ALPHA:
+      return dst[3];
+   case PIPE_BLENDFACTOR_DST_COLOR:
+      return dst[channel];
+   case PIPE_BLENDFACTOR_SRC_ALPHA_SATURATE:
+      if (channel != 3) {
+         return nir_fmin(b,
+                         src[3],
+                         nir_fsub(b,
+                                  nir_imm_float(b, 1.0),
+                                  dst[3]));
+      } else {
+         return nir_imm_float(b, 1.0);
+      }
+   case PIPE_BLENDFACTOR_CONST_COLOR:
+      return nir_channel(b, constant, channel);
+   case PIPE_BLENDFACTOR_CONST_ALPHA:
+      return nir_channel(b, constant, 3);
+   case PIPE_BLENDFACTOR_ZERO:
+      return nir_imm_float(b, 0.0);
+   case PIPE_BLENDFACTOR_INV_SRC_COLOR:
+      return nir_fsub(b, nir_imm_float(b, 1.0), src[channel]);
+   case PIPE_BLENDFACTOR_INV_SRC_ALPHA:
+      return nir_fsub(b, nir_imm_float(b, 1.0), src[3]);
+   case PIPE_BLENDFACTOR_INV_DST_ALPHA:
+      return nir_fsub(b, nir_imm_float(b, 1.0), dst[3]);
+   case PIPE_BLENDFACTOR_INV_DST_COLOR:
+      return nir_fsub(b, nir_imm_float(b, 1.0), dst[channel]);
+   case PIPE_BLENDFACTOR_INV_CONST_COLOR:
+      return nir_fsub(b, nir_imm_float(b, 1.0),
+                      nir_channel(b, constant, channel));
+   case PIPE_BLENDFACTOR_INV_CONST_ALPHA:
+      return nir_fsub(b, nir_imm_float(b, 1.0),
+                      nir_channel(b, constant, 3));
+
+
+   default:
+   case PIPE_BLENDFACTOR_SRC1_COLOR:
+   case PIPE_BLENDFACTOR_SRC1_ALPHA:
+   case PIPE_BLENDFACTOR_INV_SRC1_COLOR:
+   case PIPE_BLENDFACTOR_INV_SRC1_ALPHA:
+      /* Unsupported. */
+      fprintf(stderr, "Unknown blend factor %d\n", factor);
+      return nir_imm_float(b, 1.0);
+   }
 }
 
 
@@ -109,83 +106,83 @@ static nir_ssa_def *
 nir_blend_func_f(nir_builder *b, nir_ssa_def *src, nir_ssa_def *dst,
                  unsigned func)
 {
-        switch (func) {
-        case PIPE_BLEND_ADD:
-                return nir_fadd(b, src, dst);
-        case PIPE_BLEND_SUBTRACT:
-                return nir_fsub(b, src, dst);
-        case PIPE_BLEND_REVERSE_SUBTRACT:
-                return nir_fsub(b, dst, src);
-        case PIPE_BLEND_MIN:
-                return nir_fmin(b, src, dst);
-        case PIPE_BLEND_MAX:
-                return nir_fmax(b, src, dst);
-
-        default:
-                /* Unsupported. */
-                fprintf(stderr, "Unknown blend func %d\n", func);
-                return src;
-
-        }
+   switch (func) {
+   case PIPE_BLEND_ADD:
+      return nir_fadd(b, src, dst);
+   case PIPE_BLEND_SUBTRACT:
+      return nir_fsub(b, src, dst);
+   case PIPE_BLEND_REVERSE_SUBTRACT:
+      return nir_fsub(b, dst, src);
+   case PIPE_BLEND_MIN:
+      return nir_fmin(b, src, dst);
+   case PIPE_BLEND_MAX:
+      return nir_fmax(b, src, dst);
+
+   default:
+      /* Unsupported. */
+      fprintf(stderr, "Unknown blend func %d\n", func);
+      return src;
+
+   }
 }
 
 static void
 nir_per_channel_blending_f(const struct pipe_rt_blend_state *blend, nir_builder *b, nir_ssa_def **result,
-                  nir_ssa_def **src_color, nir_ssa_def **dst_color, nir_ssa_def *con)
+                           nir_ssa_def **src_color, nir_ssa_def **dst_color, nir_ssa_def *con)
 {
-        if (!blend->blend_enable) {
-                for (int i = 0; i < 4; i++)
-                        result[i] = src_color[i];
-                return;
-        }
-
-        nir_ssa_def *src_blend[4], *dst_blend[4];
-        for (int i = 0; i < 4; i++) {
-                int src_factor = ((i != 3) ? blend->rgb_src_factor :
-                                  blend->alpha_src_factor);
-                int dst_factor = ((i != 3) ? blend->rgb_dst_factor :
-                                  blend->alpha_dst_factor);
-                src_blend[i] = nir_fmul(b, src_color[i],
-                                        nir_blend_channel_f(b,
-                                                            src_color, dst_color,
-                                                            con, src_factor, i));
-                dst_blend[i] = nir_fmul(b, dst_color[i],
-                                        nir_blend_channel_f(b,
-                                                            src_color, dst_color,
-                                                            con, dst_factor, i));
-        }
-
-        for (int i = 0; i < 4; i++) {
-                result[i] = nir_blend_func_f(b, src_blend[i], dst_blend[i],
-                                             ((i != 3) ? blend->rgb_func :
-                                              blend->alpha_func));
-        }
+   if (!blend->blend_enable) {
+      for (int i = 0; i < 4; i++)
+         result[i] = src_color[i];
+      return;
+   }
+
+   nir_ssa_def *src_blend[4], *dst_blend[4];
+   for (int i = 0; i < 4; i++) {
+      int src_factor = ((i != 3) ? blend->rgb_src_factor :
+                        blend->alpha_src_factor);
+      int dst_factor = ((i != 3) ? blend->rgb_dst_factor :
+                        blend->alpha_dst_factor);
+      src_blend[i] = nir_fmul(b, src_color[i],
+                              nir_blend_channel_f(b,
+                                    src_color, dst_color,
+                                    con, src_factor, i));
+      dst_blend[i] = nir_fmul(b, dst_color[i],
+                              nir_blend_channel_f(b,
+                                    src_color, dst_color,
+                                    con, dst_factor, i));
+   }
+
+   for (int i = 0; i < 4; i++) {
+      result[i] = nir_blend_func_f(b, src_blend[i], dst_blend[i],
+                                   ((i != 3) ? blend->rgb_func :
+                                    blend->alpha_func));
+   }
 }
 
 /* Arguments are vec4s */
 
 nir_ssa_def *
 nir_blending_f(const struct pipe_rt_blend_state *blend, nir_builder *b,
-                  nir_ssa_def *src_color, nir_ssa_def *dst_color,
-                  nir_ssa_def *constant)
+               nir_ssa_def *src_color, nir_ssa_def *dst_color,
+               nir_ssa_def *constant)
 {
-        nir_ssa_def* result[4];
-        
-        nir_ssa_def* src_components[4] = {
-                nir_channel(b, src_color, 0),
-                nir_channel(b, src_color, 1),
-                nir_channel(b, src_color, 2),
-                nir_channel(b, src_color, 3)
-        };
-
-        nir_ssa_def* dst_components[4] = {
-                nir_channel(b, dst_color, 0),
-                nir_channel(b, dst_color, 1),
-                nir_channel(b, dst_color, 2),
-                nir_channel(b, dst_color, 3)
-        };
-
-        nir_per_channel_blending_f(blend, b, result, src_components, dst_components, constant);
-
-        return nir_vec(b, result, 4);
+   nir_ssa_def* result[4];
+
+   nir_ssa_def* src_components[4] = {
+      nir_channel(b, src_color, 0),
+      nir_channel(b, src_color, 1),
+      nir_channel(b, src_color, 2),
+      nir_channel(b, src_color, 3)
+   };
+
+   nir_ssa_def* dst_components[4] = {
+      nir_channel(b, dst_color, 0),
+      nir_channel(b, dst_color, 1),
+      nir_channel(b, dst_color, 2),
+      nir_channel(b, dst_color, 3)
+   };
+
+   nir_per_channel_blending_f(blend, b, result, src_components, dst_components, constant);
+
+   return nir_vec(b, result, 4);
 }
diff --git a/src/compiler/nir/nir_lower_blend.h b/src/compiler/nir/nir_lower_blend.h
index f6afcf8..da508ba 100644
--- a/src/compiler/nir/nir_lower_blend.h
+++ b/src/compiler/nir/nir_lower_blend.h
@@ -22,7 +22,15 @@
  * IN THE SOFTWARE.
  */
 
+#ifndef _NIR_LOWER_BLEND_H_
+#define _NIR_LOWER_BLEND_H_
+
+#include "nir_builder.h"
+#include "pipe/p_state.h"
+
 nir_ssa_def *
 nir_blending_f(const struct pipe_rt_blend_state *blend, nir_builder *b,
-                  nir_ssa_def *src_color, nir_ssa_def *dst_color,
-                  nir_ssa_def *constant);
+               nir_ssa_def *src_color, nir_ssa_def *dst_color,
+               nir_ssa_def *constant);
+
+#endif
-- 
2.7.4

