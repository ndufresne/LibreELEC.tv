From 9c95b548b07dc835097642d4d015f2b66bcdf822 Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@rosenzweig.io>
Date: Sat, 10 Nov 2018 20:06:25 -0800
Subject: [PATCH 099/151] blend: Factor around constant

---
 src/gallium/drivers/panfrost/nir_lower_blend.c   | 31 ++++++++++--------------
 src/gallium/drivers/panfrost/nir_lower_blend.h   | 10 ++------
 src/gallium/drivers/panfrost/pan_blend_shaders.c |  4 ++-
 3 files changed, 18 insertions(+), 27 deletions(-)

diff --git a/src/gallium/drivers/panfrost/nir_lower_blend.c b/src/gallium/drivers/panfrost/nir_lower_blend.c
index 6b3cff2..bf5c5b6 100644
--- a/src/gallium/drivers/panfrost/nir_lower_blend.c
+++ b/src/gallium/drivers/panfrost/nir_lower_blend.c
@@ -33,6 +33,7 @@ static nir_ssa_def *
 nir_blend_channel_f(nir_builder *b,
                     nir_ssa_def **src,
                     nir_ssa_def **dst,
+                    nir_ssa_def *constant,
                     unsigned factor,
                     int channel)
 {
@@ -57,15 +58,10 @@ nir_blend_channel_f(nir_builder *b,
                 } else {
                         return nir_imm_float(b, 1.0);
                 }
-#if 0
         case PIPE_BLENDFACTOR_CONST_COLOR:
-                return nir_load_system_value(b,
-                                             nir_intrinsic_load_blend_const_color_r_float +
-                                             channel,
-                                             0);
+                return nir_channel(b, constant, channel);
         case PIPE_BLENDFACTOR_CONST_ALPHA:
-                return nir_load_blend_const_color_a_float(b);
-#endif
+                return nir_channel(b, constant, 3);
         case PIPE_BLENDFACTOR_ZERO:
                 return nir_imm_float(b, 0.0);
         case PIPE_BLENDFACTOR_INV_SRC_COLOR:
@@ -78,13 +74,11 @@ nir_blend_channel_f(nir_builder *b,
                 return nir_fsub(b, nir_imm_float(b, 1.0), dst[channel]);
         case PIPE_BLENDFACTOR_INV_CONST_COLOR:
                 return nir_fsub(b, nir_imm_float(b, 1.0),
-                                nir_load_system_value(b,
-                                                      nir_intrinsic_load_blend_const_color_r_float +
-                                                      channel,
-                                                      0));
+                                nir_channel(b, constant, channel));
         case PIPE_BLENDFACTOR_INV_CONST_ALPHA:
                 return nir_fsub(b, nir_imm_float(b, 1.0),
-                                nir_load_blend_const_color_a_float(b));
+                                nir_channel(b, constant, 3));
+                                
 
         default:
         case PIPE_BLENDFACTOR_SRC1_COLOR:
@@ -98,7 +92,7 @@ nir_blend_channel_f(nir_builder *b,
 }
 
 
-nir_ssa_def *
+static nir_ssa_def *
 nir_blend_func_f(nir_builder *b, nir_ssa_def *src, nir_ssa_def *dst,
                  unsigned func)
 {
@@ -161,7 +155,7 @@ nir_blend_f(nir_builder *b, const struct pipe_rt_blend_state *blend, nir_ssa_def
 
 static void
 nir_per_channel_blending_f(struct pipe_rt_blend_state *blend, nir_builder *b, nir_ssa_def **result,
-                  nir_ssa_def **src_color, nir_ssa_def **dst_color)
+                  nir_ssa_def **src_color, nir_ssa_def **dst_color, nir_ssa_def *con)
 {
         if (!blend->blend_enable) {
                 for (int i = 0; i < 4; i++)
@@ -182,11 +176,11 @@ nir_per_channel_blending_f(struct pipe_rt_blend_state *blend, nir_builder *b, ni
                 src_blend[i] = nir_fmul(b, src_color[i],
                                         nir_blend_channel_f(b,
                                                             src_color, dst_color,
-                                                            src_factor, i));
+                                                            con, src_factor, i));
                 dst_blend[i] = nir_fmul(b, dst_color[i],
                                         nir_blend_channel_f(b,
                                                             src_color, dst_color,
-                                                            dst_factor, i));
+                                                            con, dst_factor, i));
         }
 
         for (int i = 0; i < 4; i++) {
@@ -200,7 +194,8 @@ nir_per_channel_blending_f(struct pipe_rt_blend_state *blend, nir_builder *b, ni
 
 nir_ssa_def *
 nir_blending_f(struct pipe_rt_blend_state *blend, nir_builder *b,
-                  nir_ssa_def *src_color, nir_ssa_def *dst_color)
+                  nir_ssa_def *src_color, nir_ssa_def *dst_color,
+                  nir_ssa_def *constant)
 {
         nir_ssa_def* result[4];
         
@@ -218,7 +213,7 @@ nir_blending_f(struct pipe_rt_blend_state *blend, nir_builder *b,
                 nir_channel(b, dst_color, 3)
         };
 
-        nir_per_channel_blending_f(blend, b, result, src_components, dst_components);
+        nir_per_channel_blending_f(blend, b, result, src_components, dst_components, constant);
 
         return nir_vec(b, result, 4);
 }
diff --git a/src/gallium/drivers/panfrost/nir_lower_blend.h b/src/gallium/drivers/panfrost/nir_lower_blend.h
index b923241..3d94bcb 100644
--- a/src/gallium/drivers/panfrost/nir_lower_blend.h
+++ b/src/gallium/drivers/panfrost/nir_lower_blend.h
@@ -23,12 +23,6 @@
  */
 
 nir_ssa_def *
-nir_blend_func_f(nir_builder *b, nir_ssa_def *src, nir_ssa_def *dst,
-                 unsigned func);
-
-nir_ssa_def *
-nir_blend_f(nir_builder *b, const struct pipe_rt_blend_state *blend, nir_ssa_def *src, nir_ssa_def *dst);
-
-nir_ssa_def *
 nir_blending_f(struct pipe_rt_blend_state *blend, nir_builder *b,
-                  nir_ssa_def *src_color, nir_ssa_def *dst_color);
+                  nir_ssa_def *src_color, nir_ssa_def *dst_color,
+                  nir_ssa_def *constant);
diff --git a/src/gallium/drivers/panfrost/pan_blend_shaders.c b/src/gallium/drivers/panfrost/pan_blend_shaders.c
index c1351d9..d0ba50a 100644
--- a/src/gallium/drivers/panfrost/pan_blend_shaders.c
+++ b/src/gallium/drivers/panfrost/pan_blend_shaders.c
@@ -98,6 +98,7 @@ panfrost_make_blend_shader(struct panfrost_context *ctx, struct panfrost_blend_s
         nir_variable *c_src = nir_variable_create(shader, nir_var_shader_in, glsl_vector_type(GLSL_TYPE_FLOAT, 4), "gl_Color");
         nir_variable *c_dst = nir_variable_create(shader, nir_var_shader_in, glsl_vector_type(GLSL_TYPE_FLOAT, 4), "gl_SecondaryColor");
         nir_variable *c_out = nir_variable_create(shader, nir_var_shader_out, glsl_vector_type(GLSL_TYPE_FLOAT, 4), "gl_FragColor");
+        nir_variable *c_con = nir_variable_create(shader, nir_var_uniform, glsl_vector_type(GLSL_TYPE_FLOAT, 4), "constant");
 
         c_src->data.location = VARYING_SLOT_COL0;
         c_dst->data.location = VARYING_SLOT_COL1;
@@ -114,9 +115,10 @@ panfrost_make_blend_shader(struct panfrost_context *ctx, struct panfrost_blend_s
 
         nir_ssa_def *s_src = nir_load_var(b, c_src);
         nir_ssa_def *s_dst = nir_load_var(b, c_dst);
+        nir_ssa_def *s_con = nir_load_var(b, c_con);
 
         /* Build a trivial blend shader */
-        nir_store_var(b, c_out, nir_blending_f(blend, b, s_src, s_dst), 0xFF);
+        nir_store_var(b, c_out, nir_blending_f(blend, b, s_src, s_dst, s_con), 0xFF);
 
         nir_print_shader(shader, stdout);
 
-- 
2.7.4

