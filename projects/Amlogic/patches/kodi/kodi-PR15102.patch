From 41916de63a2f7d287717840bd42fef1ed4d5dad3 Mon Sep 17 00:00:00 2001
From: Memphiz <memphis@machzwo.de>
Date: Thu, 20 Dec 2018 21:03:43 +0100
Subject: [PATCH 1/5] [ZeroconfAvahi] - log error code in case creating the
 avahi client fails

---
 xbmc/platform/linux/network/ZeroconfAvahi.cpp | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/xbmc/platform/linux/network/ZeroconfAvahi.cpp b/xbmc/platform/linux/network/ZeroconfAvahi.cpp
index c3ba719f5e37..92416359765c 100644
--- a/xbmc/platform/linux/network/ZeroconfAvahi.cpp
+++ b/xbmc/platform/linux/network/ZeroconfAvahi.cpp
@@ -355,9 +355,14 @@ bool CZeroconfAvahi::createClient()
     {
       avahi_client_free(mp_client);
     }
+
+    int error = 0;
     mp_client = avahi_client_new(avahi_threaded_poll_get(mp_poll),
-                                 AVAHI_CLIENT_NO_FAIL, &clientCallback,this,0);
+                                 AVAHI_CLIENT_NO_FAIL, &clientCallback,this,&error);
     if (!mp_client)
+    {
+      CLog::Log(LOGERROR, "CZeroconfAvahi::createClient() failed with %d", error);
+    }
       return false;
     return true;
 }

From cbd83bcb27655591268b68ea92ce5af335396f56 Mon Sep 17 00:00:00 2001
From: Memphiz <memphis@machzwo.de>
Date: Thu, 20 Dec 2018 21:12:19 +0100
Subject: [PATCH 2/5] [depends/shairplay] - bump to latest master 096b61a -
 fixes airtunes with latest ios versions on linux

---
 tools/depends/target/libshairplay/Makefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tools/depends/target/libshairplay/Makefile b/tools/depends/target/libshairplay/Makefile
index ecfffc5302d6..0b139263a759 100644
--- a/tools/depends/target/libshairplay/Makefile
+++ b/tools/depends/target/libshairplay/Makefile
@@ -3,7 +3,7 @@ DEPS= ../../Makefile.include Makefile
 
 # lib name, version
 LIBNAME=shairplay
-VERSION=498bc5b
+VERSION=096b61a
 SOURCE=$(LIBNAME)-$(VERSION)
 ARCHIVE=$(SOURCE).tar.bz2
 

From d6b4fc743392365ddbc1712e7a3bcff122e315f4 Mon Sep 17 00:00:00 2001
From: Memphiz <memphis@machzwo.de>
Date: Thu, 20 Dec 2018 22:03:15 +0100
Subject: [PATCH 3/5] [paplayer] - only set internal time and internal total
 time when stream is available. If not - keep the requested forced times until
 the stream is there.

---
 xbmc/cores/paplayer/PAPlayer.cpp | 26 ++++++++++++++++++--------
 xbmc/cores/paplayer/PAPlayer.h   |  4 ++--
 2 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/xbmc/cores/paplayer/PAPlayer.cpp b/xbmc/cores/paplayer/PAPlayer.cpp
index 7af07c2af637..8f598394fbc5 100644
--- a/xbmc/cores/paplayer/PAPlayer.cpp
+++ b/xbmc/cores/paplayer/PAPlayer.cpp
@@ -562,14 +562,18 @@ void PAPlayer::Process()
 
     if (m_newForcedPlayerTime != -1)
     {
-      SetTimeInternal(m_newForcedPlayerTime);
-      m_newForcedPlayerTime = -1;
+      if (SetTimeInternal(m_newForcedPlayerTime))
+      {
+        m_newForcedPlayerTime = -1;
+      }
     }
 
     if (m_newForcedTotalTime != -1)
     {
-      SetTotalTimeInternal(m_newForcedTotalTime);
-      m_newForcedTotalTime = -1;
+      if (SetTotalTimeInternal(m_newForcedTotalTime))
+      {
+        m_newForcedTotalTime = -1;
+      }
     }
 
     GetTimeInternal(); //update for GUI
@@ -956,26 +960,32 @@ int64_t PAPlayer::GetTimeInternal()
   return (int64_t)time;
 }
 
-void PAPlayer::SetTotalTimeInternal(int64_t time)
+bool PAPlayer::SetTotalTimeInternal(int64_t time)
 {
   CSingleLock lock(m_streamsLock);
   if (!m_currentStream)
-    return;
+  {
+    return false;
+  }
 
   m_currentStream->m_decoder.SetTotalTime(time);
   UpdateGUIData(m_currentStream);
+  
+  return true;
 }
 
-void PAPlayer::SetTimeInternal(int64_t time)
+bool PAPlayer::SetTimeInternal(int64_t time)
 {
   CSingleLock lock(m_streamsLock);
   if (!m_currentStream)
-    return;
+    return false;
 
   m_currentStream->m_framesSent = time / 1000 * m_currentStream->m_audioFormat.m_sampleRate;
 
   if (m_currentStream->m_stream)
     m_currentStream->m_framesSent += m_currentStream->m_stream->GetDelay() * m_currentStream->m_audioFormat.m_sampleRate;
+  
+  return true;
 }
 
 void PAPlayer::SetTime(int64_t time)
diff --git a/xbmc/cores/paplayer/PAPlayer.h b/xbmc/cores/paplayer/PAPlayer.h
index ccebbc5470b7..8aed4f8a749a 100644
--- a/xbmc/cores/paplayer/PAPlayer.h
+++ b/xbmc/cores/paplayer/PAPlayer.h
@@ -145,8 +145,8 @@ friend class CQueueNextFileJob;
   void UpdateStreamInfoPlayNextAtFrame(StreamInfo *si, unsigned int crossFadingTime);
   void UpdateGUIData(StreamInfo *si);
   int64_t GetTimeInternal();
-  void SetTimeInternal(int64_t time);
-  void SetTotalTimeInternal(int64_t time);
+  bool SetTimeInternal(int64_t time);
+  bool SetTotalTimeInternal(int64_t time);
   void CloseFileCB(StreamInfo &si);
   void AdvancePlaylistOnError(CFileItem &fileItem);
 };

From 35efe04bd2ba8999cb397574ceb809da19ff3a8a Mon Sep 17 00:00:00 2001
From: Memphiz <memphis@machzwo.de>
Date: Thu, 20 Dec 2018 22:04:18 +0100
Subject: [PATCH 4/5] [airtunes] - the progress callback is fired before our
 player is started. Cache the reported start, end and current time and inform
 the player about those times once he is playing. Fixes missing progress/total
 time right after starting airplaying music

---
 xbmc/network/AirTunesServer.cpp               | 45 ++++++++++++++++---
 xbmc/network/AirTunesServer.h                 |  4 ++
 xbmc/platform/linux/network/ZeroconfAvahi.cpp |  2 +-
 3 files changed, 43 insertions(+), 8 deletions(-)

diff --git a/xbmc/network/AirTunesServer.cpp b/xbmc/network/AirTunesServer.cpp
index ef8bd4136c26..38edc521eb88 100644
--- a/xbmc/network/AirTunesServer.cpp
+++ b/xbmc/network/AirTunesServer.cpp
@@ -72,6 +72,10 @@ std::list<CAction> CAirTunesServer::m_actionQueue;
 CEvent CAirTunesServer::m_processActions;
 int CAirTunesServer::m_sampleRate = 44100;
 
+unsigned int CAirTunesServer::m_cachedStartTime = 0;
+unsigned int CAirTunesServer::m_cachedEndTime = 0;
+unsigned int CAirTunesServer::m_cachedCurrentTime = 0;
+
 
 //parse daap metadata - thx to project MythTV
 std::map<std::string, std::string> decodeDMAP(const char *buffer, unsigned int size)
@@ -398,15 +402,39 @@ void CAirTunesServer::AudioOutputFunctions::audio_remote_control_id(void *cls, c
   }
 }
 
-void CAirTunesServer::AudioOutputFunctions::audio_set_progress(void *cls, void *session, unsigned int start, unsigned int curr, unsigned int end)
+void CAirTunesServer::InformPlayerAboutPlayTimes()
 {
-  unsigned int duration = end - start;
-  unsigned int position = curr - start;
-  duration /= m_sampleRate;
-  position /= m_sampleRate;
+  if (m_cachedEndTime > 0)
+  {
+    unsigned int duration = m_cachedEndTime - m_cachedStartTime;
+    unsigned int position = m_cachedCurrentTime - m_cachedStartTime;
+    duration /= m_sampleRate;
+    position /= m_sampleRate;
+  
+    if (g_application.GetAppPlayer().IsPlaying())
+    {
+      g_application.GetAppPlayer().SetTime(position * 1000);
+      g_application.GetAppPlayer().SetTotalTime(duration * 1000);
+      
+      // reset play times now that we have informed the player
+      m_cachedEndTime = 0;
+      m_cachedCurrentTime = 0;
+      m_cachedStartTime = 0;
+
+    }
+  }
+}
 
-  g_application.GetAppPlayer().SetTime(position * 1000);
-  g_application.GetAppPlayer().SetTotalTime(duration * 1000);
+void CAirTunesServer::AudioOutputFunctions::audio_set_progress(void *cls, void *session, unsigned int start, unsigned int curr, unsigned int end)
+{
+  m_cachedStartTime = start;
+  m_cachedCurrentTime = curr;
+  m_cachedEndTime = end;
+  if (g_application.GetAppPlayer().IsPlaying())
+  {
+    // player is there - directly inform him about play times
+    InformPlayerAboutPlayTimes();
+  }
 }
 
 void CAirTunesServer::SetupRemoteControl()
@@ -462,6 +490,9 @@ void  CAirTunesServer::AudioOutputFunctions::audio_process(void *cls, void *sess
 {
   XFILE::CPipeFile *pipe=(XFILE::CPipeFile *)cls;
   pipe->Write(buffer, buflen);
+  
+  // in case there are some play times cached that are not yet sent to the player - do it here
+  InformPlayerAboutPlayTimes();
 }
 
 void  CAirTunesServer::AudioOutputFunctions::audio_destroy(void *cls, void *session)
diff --git a/xbmc/network/AirTunesServer.h b/xbmc/network/AirTunesServer.h
index 5c5b8e7b0b2d..aafe64150bcb 100644
--- a/xbmc/network/AirTunesServer.h
+++ b/xbmc/network/AirTunesServer.h
@@ -59,6 +59,7 @@ class CAirTunesServer : public ANNOUNCEMENT::IAnnouncer, public IActionListener,
   static void RefreshCoverArt(const char *outputFilename = NULL);
   static void RefreshMetadata();
   static void ResetMetadata();
+  static void InformPlayerAboutPlayTimes();
 
   int m_port;
   static DllLibShairplay *m_pLibShairplay;//the lib
@@ -77,6 +78,9 @@ class CAirTunesServer : public ANNOUNCEMENT::IAnnouncer, public IActionListener,
   static std::list<CAction> m_actionQueue;
   static CEvent m_processActions;
   static int m_sampleRate;
+  static unsigned int m_cachedStartTime;
+  static unsigned int m_cachedEndTime;
+  static unsigned int m_cachedCurrentTime;
 
   class AudioOutputFunctions
   {
diff --git a/xbmc/platform/linux/network/ZeroconfAvahi.cpp b/xbmc/platform/linux/network/ZeroconfAvahi.cpp
index 92416359765c..8e28e54ea69d 100644
--- a/xbmc/platform/linux/network/ZeroconfAvahi.cpp
+++ b/xbmc/platform/linux/network/ZeroconfAvahi.cpp
@@ -362,8 +362,8 @@ bool CZeroconfAvahi::createClient()
     if (!mp_client)
     {
       CLog::Log(LOGERROR, "CZeroconfAvahi::createClient() failed with %d", error);
-    }
       return false;
+    }
     return true;
 }
 

From 9c1f68e69709c5586110441df9aba985f132a655 Mon Sep 17 00:00:00 2001
From: Memphiz <memphis@machzwo.de>
Date: Fri, 21 Dec 2018 20:46:48 +0100
Subject: [PATCH 5/5] [depends/shairplay] - added patch for fixing wrong
 detection condition for dns_sd.h (which is only needed when libdl is not
 found) - PR for this is upstream

---
 .../0001-configure-fix-dns-sd-check.patch     | 26 +++++++++++++++++++
 tools/depends/target/libshairplay/Makefile    |  3 ++-
 2 files changed, 28 insertions(+), 1 deletion(-)
 create mode 100644 tools/depends/target/libshairplay/0001-configure-fix-dns-sd-check.patch

diff --git a/tools/depends/target/libshairplay/0001-configure-fix-dns-sd-check.patch b/tools/depends/target/libshairplay/0001-configure-fix-dns-sd-check.patch
new file mode 100644
index 000000000000..5aa5c5300a6b
--- /dev/null
+++ b/tools/depends/target/libshairplay/0001-configure-fix-dns-sd-check.patch
@@ -0,0 +1,26 @@
+From 031c3d802e51bbc233b1044f812402a66bfcf237 Mon Sep 17 00:00:00 2001
+From: Memphiz <memphis@machzwo.de>
+Date: Fri, 21 Dec 2018 20:39:11 +0100
+Subject: [PATCH] [configure] - only check for dns_sd.h in case libdl was not
+ found
+
+---
+ configure.ac | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/configure.ac b/configure.ac
+index 5a4b8ad..682d74b 100644
+--- a/configure.ac
++++ b/configure.ac
+@@ -19,7 +19,7 @@ LT_LIB_DLLOAD
+ 
+ # Checks for header files.
+ AC_HEADER_STDC
+-if test yes = "$libltdl_cv_func_dlopen" || test yes = "$libltdl_cv_lib_dl_dlopen"
++if test no = "$libltdl_cv_func_dlopen" && test no = "$libltdl_cv_lib_dl_dlopen"
+ then
+   AC_CHECK_HEADERS([dns_sd.h], [],
+                    [AC_MSG_ERROR([Could not find dns_sd.h header, please install libavahi-compat-libdnssd-dev or equivalent.])])
+-- 
+2.17.1
+
diff --git a/tools/depends/target/libshairplay/Makefile b/tools/depends/target/libshairplay/Makefile
index 0b139263a759..30d12164bfcb 100644
--- a/tools/depends/target/libshairplay/Makefile
+++ b/tools/depends/target/libshairplay/Makefile
@@ -1,5 +1,5 @@
 include ../../Makefile.include
-DEPS= ../../Makefile.include Makefile
+DEPS= ../../Makefile.include Makefile 0001-configure-fix-dns-sd-check.patch
 
 # lib name, version
 LIBNAME=shairplay
@@ -21,6 +21,7 @@ $(TARBALLS_LOCATION)/$(ARCHIVE):
 $(PLATFORM): $(TARBALLS_LOCATION)/$(ARCHIVE) $(DEPS)
 	rm -rf $(PLATFORM); mkdir -p $(PLATFORM)
 	cd $(PLATFORM); $(ARCHIVE_TOOL) $(ARCHIVE_TOOL_FLAGS) $(TARBALLS_LOCATION)/$(ARCHIVE)
+	cd $(PLATFORM); patch -p1 < ../0001-configure-fix-dns-sd-check.patch
 	cd $(PLATFORM); $(AUTORECONF) -vif
 	cd $(PLATFORM); $(CONFIGURE)
 
