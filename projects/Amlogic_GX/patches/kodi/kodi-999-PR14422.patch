From 320afc5427791e81feacdfc7375a654036ee418f Mon Sep 17 00:00:00 2001
From: Neil Armstrong <narmstrong@baylibre.com>
Date: Wed, 12 Sep 2018 14:26:10 +0000
Subject: [PATCH 1/3] utils: Add CPU SoC information

Add a new line in GUIWindowSystemInfo to display the actual
SoC (System-On-Chip) used on the system only if the information
is available, otherwise it's not showed.

Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
---
 xbmc/utils/CPUInfo.h                 | 3 +++
 xbmc/utils/SystemInfo.cpp            | 7 +++++++
 xbmc/utils/SystemInfo.h              | 1 +
 xbmc/windows/GUIWindowSystemInfo.cpp | 2 ++
 4 files changed, 13 insertions(+)

diff --git a/xbmc/utils/CPUInfo.h b/xbmc/utils/CPUInfo.h
index 9cde6c2f4f9f..fa99213d1303 100644
--- a/xbmc/utils/CPUInfo.h
+++ b/xbmc/utils/CPUInfo.h
@@ -54,6 +54,7 @@ struct CoreInfo
   std::string m_strVendor;
   std::string m_strModel;
   std::string m_strBogoMips;
+  std::string m_strSoC;
   std::string m_strHardware;
   std::string m_strRevision;
   std::string m_strSerial;
@@ -72,6 +73,7 @@ class CCPUInfo
   bool getTemperature(CTemperature& temperature);
   std::string& getCPUModel() { return m_cpuModel; }
   std::string& getCPUBogoMips() { return m_cpuBogoMips; }
+  std::string& getCPUSoC() { return m_cpuSoC; }
   std::string& getCPUHardware() { return m_cpuHardware; }
   std::string& getCPURevision() { return m_cpuRevision; }
   std::string& getCPUSerial() { return m_cpuSerial; }
@@ -115,6 +117,7 @@ class CCPUInfo
   XbmcThreads::EndTime m_nextUsedReadTime;
   std::string  m_cpuModel;
   std::string  m_cpuBogoMips;
+  std::string  m_cpuSoC;
   std::string  m_cpuHardware;
   std::string  m_cpuRevision;
   std::string  m_cpuSerial;
diff --git a/xbmc/utils/SystemInfo.cpp b/xbmc/utils/SystemInfo.cpp
index c8bd4e2dff0f..209940faf1c1 100644
--- a/xbmc/utils/SystemInfo.cpp
+++ b/xbmc/utils/SystemInfo.cpp
@@ -498,6 +498,13 @@ std::string CSysInfo::GetCPUBogoMips()
   return "BogoMips: " + g_cpuInfo.getCPUBogoMips();
 }
 
+std::string CSysInfo::GetCPUSoC()
+{
+  if (!g_cpuInfo.getCPUSoC().empty())
+    return "SoC: " + g_cpuInfo.getCPUSoC();
+  return "";
+}
+
 std::string CSysInfo::GetCPUHardware()
 {
   return "Hardware: " + g_cpuInfo.getCPUHardware();
diff --git a/xbmc/utils/SystemInfo.h b/xbmc/utils/SystemInfo.h
index bda348af4ed3..bc165de3ccda 100644
--- a/xbmc/utils/SystemInfo.h
+++ b/xbmc/utils/SystemInfo.h
@@ -122,6 +122,7 @@ class CSysInfo : public CInfoLoader, public ISubSettings
   static const std::string& GetKernelCpuFamily(void);
   std::string GetCPUModel();
   std::string GetCPUBogoMips();
+  std::string GetCPUSoC();
   std::string GetCPUHardware();
   std::string GetCPURevision();
   std::string GetCPUSerial();
diff --git a/xbmc/windows/GUIWindowSystemInfo.cpp b/xbmc/windows/GUIWindowSystemInfo.cpp
index 83ab46b3c908..3bde0c918103 100644
--- a/xbmc/windows/GUIWindowSystemInfo.cpp
+++ b/xbmc/windows/GUIWindowSystemInfo.cpp
@@ -147,6 +147,8 @@ void CGUIWindowSystemInfo::FrameMove()
     SET_CONTROL_LABEL(i++, g_sysinfo.GetCPUModel());
 #if defined(__arm__) && defined(TARGET_LINUX)
     SET_CONTROL_LABEL(i++, g_sysinfo.GetCPUBogoMips());
+    if (!g_sysinfo.GetCPUSoC().empty())
+      SET_CONTROL_LABEL(i++, g_sysinfo.GetCPUSoC());
     SET_CONTROL_LABEL(i++, g_sysinfo.GetCPUHardware());
     SET_CONTROL_LABEL(i++, g_sysinfo.GetCPURevision());
     SET_CONTROL_LABEL(i++, g_sysinfo.GetCPUSerial());

From fb9303eb0e9508346229f37c45ed8ed719e7eab1 Mon Sep 17 00:00:00 2001
From: Neil Armstrong <narmstrong@baylibre.com>
Date: Tue, 11 Sep 2018 09:34:59 +0000
Subject: [PATCH 2/3] utils: SystemInfo: Use sysfs-devices-soc on Linux if
 available

New Linux embedded systems uses the new sysfs soc device interface
to store the SoC family, id and revision and the board model.

Use this for the Kodi SystemInfo.

Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
---
 xbmc/utils/SystemInfo.cpp | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/xbmc/utils/SystemInfo.cpp b/xbmc/utils/SystemInfo.cpp
index 209940faf1c1..0963cc08fba3 100644
--- a/xbmc/utils/SystemInfo.cpp
+++ b/xbmc/utils/SystemInfo.cpp
@@ -27,6 +27,7 @@
 #include "settings/Settings.h"
 #include "platform/Filesystem.h"
 #include "utils/log.h"
+#include "utils/SysfsUtils.h"
 
 #ifdef TARGET_WINDOWS
 #include "dwmapi.h"
@@ -771,6 +772,20 @@ std::string CSysInfo::GetManufacturerName(void)
     auto eas = EasClientDeviceInformation();
     auto manufacturer = eas.SystemManufacturer();
     g_charsetConverter.wToUTF8(std::wstring(manufacturer.c_str()), manufName);
+#elif defined(TARGET_LINUX)
+    if (SysfsUtils::Has("/sys/bus/soc/devices/soc0/family"))
+    {
+      std::string family;
+      SysfsUtils::GetString("/sys/bus/soc/devices/soc0/family", family);
+      if (SysfsUtils::Has("/sys/bus/soc/devices/soc0/soc_id"))
+      {
+        std::string soc_id;
+        SysfsUtils::GetString("/sys/bus/soc/devices/soc0/soc_id", soc_id);
+        manufName = family + " " + soc_id;
+      }
+      else
+        manufName = family;
+    }
 #elif defined(TARGET_WINDOWS)
     // We just don't care, might be useful on embedded
 #endif
@@ -804,6 +819,9 @@ std::string CSysInfo::GetModelName(void)
     auto eas = EasClientDeviceInformation();
     auto manufacturer = eas.SystemProductName();
     g_charsetConverter.wToUTF8(std::wstring(manufacturer.c_str()), modelName);
+#elif defined(TARGET_LINUX)
+    if (SysfsUtils::Has("/sys/bus/soc/devices/soc0/machine"))
+      SysfsUtils::GetString("/sys/bus/soc/devices/soc0/machine", modelName);
 #elif defined(TARGET_WINDOWS)
     // We just don't care, might be useful on embedded
 #endif

From 331a706b59753d372116ff933589caf988548012 Mon Sep 17 00:00:00 2001
From: Neil Armstrong <narmstrong@baylibre.com>
Date: Tue, 11 Sep 2018 13:22:13 +0000
Subject: [PATCH 3/3] utils: CPUInfo: use sysfs-devices-soc to gather more
 system info

New Linux embedded systems uses the new sysfs soc device interface
to store the SoC family, id and the board model.

Use this for the Kodi CPUInfo.

Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
---
 xbmc/utils/CPUInfo.cpp | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/xbmc/utils/CPUInfo.cpp b/xbmc/utils/CPUInfo.cpp
index cb4658464c4e..599186451aeb 100644
--- a/xbmc/utils/CPUInfo.cpp
+++ b/xbmc/utils/CPUInfo.cpp
@@ -10,6 +10,7 @@
 
 #include "CPUInfo.h"
 #include "utils/log.h"
+#include "utils/SysfsUtils.h"
 #include "utils/Temperature.h"
 #include <string>
 #include <string.h>
@@ -419,6 +420,21 @@ CCPUInfo::CCPUInfo(void)
       }
     }
     fclose(fCPUInfo);
+    // new socs use the sysfs soc interface to describe the hardware
+    if (SysfsUtils::Has("/sys/bus/soc/devices/soc0"))
+    {
+      std::string machine, family, soc_id;
+      if (SysfsUtils::Has("/sys/bus/soc/devices/soc0/machine"))
+        SysfsUtils::GetString("/sys/bus/soc/devices/soc0/machine", machine);
+      if (SysfsUtils::Has("/sys/bus/soc/devices/soc0/family"))
+        SysfsUtils::GetString("/sys/bus/soc/devices/soc0/family", family);
+      if (SysfsUtils::Has("/sys/bus/soc/devices/soc0/soc_id"))
+        SysfsUtils::GetString("/sys/bus/soc/devices/soc0/soc_id", soc_id);
+      if (m_cpuHardware.empty() && !machine.empty())
+        m_cpuHardware = machine;
+      if (!family.empty() && !soc_id.empty())
+        m_cpuSoC = family + " " + soc_id;
+    }
     //  /proc/cpuinfo is not reliable on some Android platforms
     //  At least we should get the correct cpu count for multithreaded decoding
 #if defined(TARGET_ANDROID)
